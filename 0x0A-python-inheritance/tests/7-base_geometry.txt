Using ``BaseGeometry`` module
==============================

Using the ``integer_validator`` method to check if the value is an integer.

Importing the module:

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()

Passing a valid integer:

>>> bg.integer_validator("my_int", 12)
>>> type(bg)
<class '7-base_geometry.BaseGeometry'>

Printing the object:

>>> print(bg) # doctest: +ELLIPSIS
<7-base_geometry.BaseGeometry object at ...>

Passing a string:

>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
    ...
TypeError: <name> must be an integer

Passing a number greater than 0:

>>> bg.integer_validator("age", 6)

Passing zero:

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: <name> must be greater than 0

Passing a value less than zero:

>>> bg.integer_validator("age", -5)
Traceback (most recent call last):
    ...
ValueError: <name> must be greater than 0

Passing None:

>>> bg.integer_validator("distance", None)
Traceback (most recent call last):
    ...
TypeError: <name> must be an integer

Passing only one argument:

>>> bg.integer_validator("distance")
Traceback (most recent call last):
    ...
TypeError: integer_validator() missing 1 required positional argument: 'value'

Passing no arguments:

>>> bg.integer_validator()
Traceback (most recent call last):
    ...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

Passing None:

>>> bg.integer_validator(None)
Traceback (most recent call last):
    ...
TypeError: integer_validator() missing 1 required positional argument: 'value'

Passing a tuple:

>>> bg.integer_validator("age", (6, 1))
Traceback (most recent call last):
    ...
TypeError: <name> must be an integer

Passing a list:

>>> bg.integer_validator("age", [5, 7])
Traceback (most recent call last):
    ...
TypeError: <name> must be an integer

Passing a set:

>>> bg.integer_validator("age", {4, 4})
Traceback (most recent call last):
    ...
TypeError: <name> must be an integer

Passing None:

>>> bg = BaseGeometry(None)
Traceback (most recent call last):
    ...
TypeError: BaseGeometry() takes no arguments
