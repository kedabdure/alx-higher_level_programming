the ``1-my_list`` module
========================

Using ``MyList `` list function
-------------------------------
::

    >>> MyList = __import__('1-my_list').MyList
    >>> my_list = MyList()
    >>> type(my_list)
    <class '1-my_list.MyList'>

::

correct case passing one list:

::

    >>> my_list = MyList([1, 4, 5, 6, 7])
    >>> print(my_list)
    [1, 4, 5, 6, 7]

::

Note that lists of strings are sorted lexographically.

::

    >>> my_list = MyList()
    >>> my_list.append("Brennan")
    >>> my_list.append("Poppy")
    >>> my_list.append("School")
    >>> my_list.append("Holberton")
    >>> my_list.append("Betty")
    >>> print(my_list)
    ['Brennan', 'Poppy', 'School', 'Holberton', 'Betty']

::

The method prints the list in ascending sorted order.

::

    >>> my_list.append(1)
    >>> my_list.append(4)
    >>> my_list.append(2)
    >>> my_list.append(3)
    >>> my_list.append(5)
    >>> print(my_list)
    [1, 4, 2, 3, 5]
   
::

passing two argument:

::

    >>> my_list = MyList([1, 4, 5, 6, 7], [4, 3, 2, 7])
    Traceback (most recent call last):
        ...
    TypeError: list expected at most 1 argument, got 2

::

passing directly to the object:

::

    >>> my_list([2, 3, 4])
    Traceback (most recent call last):
        ...
    TypeError: 'MyList' object is not callable

::

passing None:

::

    >>> my_list = MyList(None)
    Traceback (most recent call last):
        ...
    TypeError: 'NoneType' object is not iterable

::

passing differnt type of data to the list:

::

    >>> my_list = MyList([1, "Betty", "Holberton", 5])
    >>> my_list.print_sorted()
    Traceback (most recent call last):
        ...
    TypeError: '<' not supported between instances of 'str' and 'int'

::
